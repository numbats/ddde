---
title: "ETC5521 Tutorial 4"
subtitle: "Initial data analysis"
author: "Prof. Di Cook"
quarto-required: ">=1.3.0"
format:
    unilur-html:
        output-file: tutorial.html
        embed-resources: true
        css: "../assets/tutorial.css"
    unilur-html+solution:
        output-file: tutorialsol.html
        embed-resources: true
        css: "../assets/tutorial.css"
        show-solution: true
---


```{r include=FALSE}
#| echo: false
library(tidyverse)
library(conflicted)

# Set up chunk for all slides
knitr::opts_chunk$set(
  fig.width = 6,
  fig.height = 4,
  fig.align = "center",
  out.width = "100%",
  code.line.numbers = FALSE,
  fig.retina = 4,
  echo = TRUE,
  message = FALSE,
  warning = FALSE,
  cache = FALSE,
  dev.args = list(pointsize = 11)
)
options(
  digits = 2,
  width = 80,
  ggplot2.continuous.colour = "viridis",
  ggplot2.continuous.fill = "viridis",
  ggplot2.discrete.colour = c("#D55E00", "#0072B2", "#009E73", "#CC79A7", "#E69F00", "#56B4E9", "#F0E442"),
  ggplot2.discrete.fill = c("#D55E00", "#0072B2", "#009E73", "#CC79A7", "#E69F00", "#56B4E9", "#F0E442")
)
theme_set(theme_bw(base_size = 14) +
   theme(
     aspect.ratio = 1,
     plot.background = element_rect(fill = 'transparent', colour = NA),
     plot.title.position = "plot",
     plot.title = element_text(size = 24),
     panel.background = element_rect(fill = 'transparent', colour = NA),
     legend.background = element_rect(fill = 'transparent', colour = NA),
     legend.key = element_rect(fill = 'transparent', colour = NA)
   )
)

conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::slice)

```

## ðŸŽ¯ Objectives

Practice conducting initial data analyses, and make a start on learning how to assess significance of patterns. 

## ðŸ”§ Preparation 

The reading for this week is [Wickham et al. (2010) Graphical inference for Infovis](https://vita.had.co.nz/papers/inference-infovis.pdf).  
- Complete the weekly quiz, before the deadline!
- Make sure you have this list of R packages installed: 

```{r}
#| eval: false
#| code-fold: false
install.packages(c("tidyverse"))
```

- Open your RStudio Project for this unit, (the one you created in week 1, `ETC5521`). Create a `.qmd` document for this weeks activities. 


## ðŸ“¥ Exercises

This tutorial focuses on IDA for the `gardenR` data, with the goal to answer this question:

**Which variety of tomato produces the most return on investment, as measured by weight?**

### Exercise 1

a. How many types of vegetables were grown in each year?
b. How many vegetables were grown in 2020 that were not grown in 2021? 
c. What are some of the data recording errors that can be seen by comparing vegetables grown in each year?

::: unilur-solution

```{r}
library(gardenR)
library(tidyverse)
library(ggbeeswarm)

data("garden_coords")
data("garden_harvest")
data("garden_planting")
data("garden_spending")
data("harvest_2021")
data("planting_2021")
data("spending_2021")
```

`r garden_harvest |> count(vegetable, sort=TRUE) |> nrow()` grown in 2020, and `r harvest_2021 |> count(vegetable, sort=TRUE) |> nrow()` grown in 2021.

b. To work out which differ between years, use the `anti_join()` function. Because there are multiple plots of vegetables use `distinct()` to remove duplicates, and then arrange alphabetically for ease of comparison. 

```{r}
#| label: mismatches
in20butnot21 <- anti_join(select(garden_harvest, vegetable), select(harvest_2021, vegetable), by="vegetable") |> 
  distinct() |> 
  arrange(vegetable)
in21butnot20 <- anti_join(select(harvest_2021, vegetable), select(garden_harvest, vegetable), by="vegetable") |> 
  distinct() |> 
  arrange(vegetable)
in20butnot21$vegetable
in21butnot20$vegetable
```

c. 

- `swiss chard` was grown in each year but capital "S" was used in 2020. 
- `apples` were grown in each year, but singular name was used in 2021.
- similarly for `pumpkins` but in reverse, singular used in 2020!

```{r}
harvest_2020 <- garden_harvest |>
  mutate(vegetable = tolower(vegetable),
         variety = tolower(variety)) |>
  mutate(vegetable = case_match(
    vegetable,
    "apple" ~ "apples",
    .default = vegetable)
  )
harvest_2021 <- harvest_2021 |>
  mutate(vegetable = case_match(
    vegetable,
    "pumpkin" ~ "pumpkins",
    .default = vegetable)
  )
```

So final answer for (b) is here are the vegetables not grown both years:

```{r}
#| label: mismatches
#| echo: false
```


:::

### Exercise 2

a. Join the harvest, spending and planting data for the two years, after adding a new variable each, called `year`. Show your code.
b. Make a subset containing just the tomatoes, for each set.
c. Are the varieties of tomatoes grown each year the same?
d. Are the tomato varieties grown in the same plots each year?
e. When are tomatoes planted and harvested, in Lisa's garden?

::: unilur-solution

a.

```{r}
harvest_2020 <- garden_harvest |>
  mutate(year = "2020")
harvest_2021 <- harvest_2021 |>
  mutate(year = "2021")
harvest <- bind_rows(harvest_2020, harvest_2021)

spending_2020 <- garden_spending |>
  mutate(year = "2020")
spending_2021 <- spending_2021 |>
  mutate(year = "2021")
spending <- bind_rows(spending_2020, spending_2021)

planting_2020 <- garden_planting |>
  mutate(year = "2020")
planting_2021 <- planting_2021 |>
  mutate(year = "2021")
planting <- bind_rows(planting_2020, planting_2021)
```

b.

```{r}
harvest_toms <- harvest |> filter(vegetable == "tomatoes")
spending_toms <- spending |> filter(vegetable == "tomatoes")
planting_toms <- planting |> filter(vegetable == "tomatoes")
```

c. 

```{r}
tom_smry <- harvest_toms |> 
  count(variety, year) |> 
  pivot_wider(names_from = year, values_from = n)
tom_smry
n_complete <- tom_smry |> mutate(m=`2020`+`2021`) |> filter(!is.na(m)) |> nrow()
```

There are a lot of varieties of tomatoes grown, only `r n_complete` are grown in both years.

d. Use only the varieties grown in both years. 

```{r}
#| code-fold: true
tom_both_yrs <- tom_smry |> mutate(m=`2020`+`2021`) |> filter(!is.na(m)) 
planting_toms |> 
  filter(variety %in% tom_both_yrs$variety) |>
  count(variety, plot, year) |>
  pivot_wider(names_from = plot, values_from = n)
```

Not a single variety is grown in the same plot each year. This might cause problems, if the plots are not equally good for growing tomatoes.

e. Again, just use the tomatoes that are grown in each year. 

```{r}
#| code-fold: true
planting_toms_sub <- planting_toms |>
  filter(variety %in% tom_both_yrs$variety) |>
  mutate(type = "planting") |>
  select(variety, date, type, year)
harvest_toms_sub <- harvest_toms |>
  filter(variety %in% tom_both_yrs$variety) |>
  mutate(type = "harvest") |>
  select(variety, date, type, year)
tom_variety_order <- harvest_toms_sub |>
  group_by(variety) |>
  summarise(date = min(date)) |>
  arrange(date)
p_h_tom <- bind_rows(planting_toms_sub, harvest_toms_sub) |>
  mutate(day_yr = yday(date)) |>
  mutate(variety = factor(variety, tom_variety_order$variety))
ggplot(p_h_tom) +
  geom_point(aes(x=day_yr, y=year, colour=type)) +
  facet_wrap(~variety, ncol=4, scales="free_x") +
  scale_colour_brewer("", palette="Dark2") +
  xlab("day of year") + ylab("") +
  theme(legend.position="bottom")
```

Planting is usually in late May, and it is consistent for all the varieties. 

Harvesting starts around 50 days after planting. 2020 had an earlier harvest than 2021 for all varieties. Big Beef tends to be harvested first, and Black Kim later. Old German had a poor harvest in 2021 relative to 2022.

:::

### Exercise 3 Try to answer the original question. 

a. How should you calibrate weight of harvest by amount of seeds planted?

b. Which variety produces the most return on investment?

::: unilur-solution

a. We'll divide the weight by number of seeds planted. An interesting observation is that so few tomato seeds were planted! Packets of tomato seeds have lots of seeds.

```{r}
#| code-fold: true
#| fig-width: 8
#| fig-height: 6
#| out-width: 100%
planting_smry <- planting_toms |>
  filter(variety %in% tom_both_yrs$variety) |>
  select(variety, date, year, number_seeds_planted, number_seeds_exact) |>
  group_by(variety, year) |>
  summarise(nseeds = sum(number_seeds_planted))
harvest_smry <- harvest_toms |>
  filter(variety %in% tom_both_yrs$variety) |>
  group_by(variety, year) |>
  summarise(weight = sum(weight))
tom_weight <- left_join(planting_smry, harvest_smry) |>
  mutate(wgt_ps = weight/nseeds)

ggplot(tom_weight, aes(
  x = fct_reorder(variety, wgt_ps),
  y = wgt_ps,
  colour = year)) +
  geom_point() + 
  coord_flip() +
  xlab("") + ylab("weight per seed") +
  scale_colour_brewer("", palette="Dark2")
```

b. 

Big Beef is a consistently high performer, over these two years. Old German is the most varied, top by weight in 2020 but failed in 2021.

:::

## ðŸ‘Œ Finishing up

Make sure you say thanks and good-bye to your tutor. This is a time to also report what you enjoyed and what you found difficult.
